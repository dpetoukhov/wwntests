{
    "collab_server" : "",
    "contents" : "context('Testing the Hypothesis Test Function')\n\nset.seed(42)\nb1 <- brown_motion(100, 50)\nf1 <- far_1_S(100, 50, 0.7)\n\ntest_that(\"fport_test Producing Valid Output for All Valid Combinations of Parameters\", {\n  # Testing single-lag test\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', lag = 12), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', lag = 12), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', lag = 2, low_disc=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', lag = 2, low_disc=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', lag = 1, M=250), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', lag = 1, M=250), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', lag = 2, low_disc=TRUE, M=100), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', lag = 2, low_disc=TRUE, M=100), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', lag = 20, alpha=0.1, M=500, low_disc=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', lag = 20, alpha=0.1, M=500, low_disc=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', iid=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', iid=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', bootstrap = TRUE, lag = 1), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', bootstrap = TRUE, lag = 5), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', bootstrap = TRUE, lag = 1, moving = TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', bootstrap = TRUE, lag = 5, moving = TRUE, straps = 150), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', bootstrap = TRUE, lag = 1, block_size = 1), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', bootstrap = TRUE, lag = 5, block_size = 5), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'single-lag', bootstrap = TRUE, lag = 1, straps = 150, block_size = 1), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'single-lag', bootstrap = TRUE, lag = 5, straps = 100, block_size = 10), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n\n\n\n  # Testing multi-lag test\n  expect_success(expect_is(res <- fport_test(b1, test = 'multi-lag', lag = 10), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'multi-lag', lag = 10), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'multi-lag', lag = 20, low_disc=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'multi-lag', lag = 20, low_disc=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'multi-lag', lag = 8, M=250), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'multi-lag', lag = 8, M=250), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'multi-lag', lag = 5, alpha=0.1, M=100, low_disc=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'multi-lag', lag = 5, alpha=0.1, M=100, low_disc=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'multi-lag', lag = 10, iid=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'multi-lag', lag = 10, iid=TRUE), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n\n  # Testing spectral test\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral', bandwidth = 2), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral', kernel = 'Parzen', bandwidth = 'static'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral', kernel = 'Parzen', bandwidth = 5), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral', kernel = 'Daniell', bandwidth = 'static'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral', kernel = 'Daniell', bandwidth = 10), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral', kernel = 'Daniell', bandwidth = 'adaptive'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral', kernel = 'Parzen', bandwidth = 'adaptive'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'spectral', kernel = 'Bartlett', bandwidth = 'adaptive'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral', bandwidth = 2), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral', kernel = 'Parzen', bandwidth = 'static'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral', kernel = 'Parzen', bandwidth = 5), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral', kernel = 'Daniell', bandwidth = 'static'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral', kernel = 'Daniell', bandwidth = 10), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral', kernel = 'Daniell', bandwidth = 'adaptive'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral', kernel = 'Parzen', bandwidth = 'adaptive'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'spectral', kernel = 'Bartlett', bandwidth = 'adaptive'), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n\n  # Testing Independence Test\n  expect_success(expect_is(res <- fport_test(b1, test = 'independence', lag = 3), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'independence', components = 5, lag = 20), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'independence', lag = 5), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(b1, test = 'independence', components = 2, lag = 2), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'independence', lag = 3), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'independence', components = 5, lag = 1), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'independence', lag = 5), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n\n  expect_success(expect_is(res <- fport_test(f1, test = 'independence', components = 2, lag = 2), \"list\"))\n  expect_success(expect_length(res, 3))\n  expect_success(expect_equal(sum(is.na(res)), 0))\n})\n\n",
    "created" : 1560274663326.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3647700304",
    "id" : "F274ECFC",
    "lastKnownWriteTime" : 1559646515,
    "last_content_update" : 1559646515,
    "path" : "~/wwntests/tests/testthat/test_hyp_tst.R",
    "project_path" : "tests/testthat/test_hyp_tst.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}