}
if (is.null(numcores)) {
sum1 <- sum1 + MCint_eta_approx_i_j(f_data, i, i, M=M, low_disc=low_disc)
} else {
sum1 <- sum1 + MCint_eta_approx_i_j_vec(f_data, i, i, M=M, low_disc=low_disc,
numcores=numcores)
}
}
}
}
variance_V_K <- sum1
variance_V_K
}
obs_nums <- c(400, 600)
resolution <- c(100, 250)
rejection_rates_10_brown = matrix(0, nrow=length(resolution), ncol=length(obs_nums))
rownames(rejection_rates_10_brown) <- lapply(resolution, function(x) paste('J=',x))
colnames(rejection_rates_10_brown) <- lapply(obs_nums, function(x) paste('T=',x))
for (T in 1:length(obs_nums)) {
stats_b <- rep(0, 200)
quantiles_b <- rep(0, 200)
for (J in 1:length(resolution)) {
for (i in 1:200) {
b <- brown_motion(obs_nums[T], resolution[J])
stats_b[i] <- t_statistic_V(b, 20)
quantiles_b[i] <- V_WS_quantile(b, 20)
}
rejection_rates_10_brown[J,T] <- sum(stats_b > quantiles_b)
}
}
devtools::check()
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
devtools::check()
install.packages("devtools")
devtools::document()
devtools::check()
devtools::load_all()
getwd
getwd()
setwd('/Users/daniel/wwntests')
devtools::load_all()
install.packages("testthat")
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
library(wwntests)
devtools::check()
for (j in 1:300) {
for (i in samples[-1]) {
bootstrapped_data <- cbind(bootstrapped_data, f_data[,B[[samples[i]]]])
}
}
devtools::load_all()
b <- brown_motion(250, 150)
block_bootsrap(b, 10)
devtools::document()
block_bootsrap?
f
?block_bootstrap
?block_bootstrap()
help(block_bootstrap)
devtools::load_all()
devtools::document()
?block_bootsrap
?block_bootsrap
devtools::load_all()
Q_WS_hyp_test(b, 1, bootstrap = TRUE)
Q_WS_hyp_test <- function(f_data, lag, alpha=0.05, iid=FALSE,
M=NULL, low_disc=FALSE, numcores=NULL, bootstrap=FALSE,
straps=299, block_size=10) {
statistic <- t_statistic_Q(f_data, lag)
if (bootstrap == TRUE) {
bootsraps <- list()
stats_distr <- list()
bootstrap_samples <- block_bootsrap(f_data, block_size, straps)
for (sample in bootstrap_samples) {
stats_distr[[i]] <- t_statistic_Q(sample, lag = lag)
}
statistic <- t_statistic_Q(f_data, lag=lag)
quantile <- quantile(as.numeric(stats_distr), 1 - alpha)
list(reject = statistic > quantile, statistic = statistic, quantile = quantile)
} else if (iid == FALSE) {
results <- Q_WS_quantile(f_data, lag, alpha=alpha, M=M, low_disc=low_disc,
numcores=numcores)
statistic <- results$statistic
quantile <- results$quantile
p_val <- results$p_val
reject <- statistic > quantile
list(p_value = p_val, quantile = quantile, reject = reject)
} else {
results <- Q_WS_quantile_iid(f_data, alpha=alpha)
statistic <- results$statistic
quantile <- results$quantile
p_val <- results$p_val
reject <- statistic > quantile
list(p_value = p_val, quantile = quantile, reject = reject)
}
}
Q_WS_hyp_test(b, 1, bootstrap = 300)
test <- block_bootsrap(brown_motion(5,5), 10)
test <- block_bootsrap(brown_motion(10,10), 5)
b <- brown_motion(10, 10)
block_bootsrap(b, 10)
t <- c(1,2,3,4)
t[1:2]
t[3:6]
na.omit(t[3:6])
na.exclude(t[3:6])
na.omit(t[3:6]) == t[3:4]
na.omit(t[3:6])[1]
1:1
devtools::load_all()
block_bootsrap(b, 10)
block_bootsrap(b, 5)
devtools::load_all()
block_bootsrap(b, 5)
block_bootsrap(b, 10)
block_bootsrap(b, 5)
devtools::load_all()
block_bootsrap(b, 10)
block_bootsrap(b, 5)
block_bootsrap(b, 10)
Q_WS_hyp_test(brown_motion(250, 150), 1, bootstrap = TRUE)
Q_WS_hyp_test(brown_motion(250, 150), 1, bootstrap = TRUE)
b <- brown_motion(3, 3)
test <- block_bootsrap(b, 1)
test
b <- brown_motion(6, 6)
test <- block_bootsrap(b, 2)
test
devtools::load_all()
test <- block_bootsrap(b, 2)
test
b
block_bootsrap(b, b = 2, B = 2)
devtools::load_all()
devtools::load_all()
t <- block_bootsrap(b , 2)
t
b <- brown_motion(6, 100)
b <- brown_motion(6, 10)
t <- block_bootsrap(b , 2)
t
b <- brown_motion(6, 7)
t <- block_bootsrap(b , 2)
t
samp <- c(1,2,3,4)
samp[-1]
t <- block_bootsrap(b , 2, B = 2)
t
t <- block_bootsrap(b , 2, B = 300)
t
t <- block_bootsrap(b , 2, B = 3)
t
brown <- brown_motion(6, 8)
t <- block_bootsrap(brown , 2, B = 3)
t
t <- block_bootsrap(brown , 2, B = 3)
t
t <- block_bootsrap(brown , 2, B = 3)
t
t <- block_bootsrap(brown , 2, B = 3)
t
devtools::load_all()
brown <- brown_motion(6, 8)
t <- block_bootsrap(brown , 2, B = 3)
t
t <- block_bootsrap(brown , 2, B = 3)
t
devtools::load_all()
t <- block_bootsrap(brown , 2, B = 3)
t
t <- block_bootsrap(brown , 2, B = 3)
t
print("Time taken for bootstrapping is %d and time take for stat distr. is $d", 1.54, 2.03)
print("Time taken for bootstrapping is %d and time take for stat distr. is %d", 1,2)
print("Time taken for bootstrapping is %f and time take for stat distr. is %f", 1,2)
sprint("Time taken for bootstrapping is %f and time take for stat distr. is %f", 1,2)
sprintf("Time taken for bootstrapping is %f and time take for stat distr. is %f", 1,2)
Q_WS_hyp_test(brown_motion(250, 150), lag=1,  bootstrap = TRUE)
t
for (sample in t) {}
for (sample in t) {t_statistic_Q(sample, 1)}
for (sample in t) {print(t_statistic_Q(sample, 1))}
t
devtools::load_all()
Q_WS_hyp_test(brown_motion(250, 150), lag=1,  bootstrap = TRUE)
Q_WS_hyp_test <- function(f_data, lag, alpha=0.05, iid=FALSE,
M=NULL, low_disc=FALSE, numcores=NULL, bootstrap=FALSE,
straps=300, block_size=10) {
statistic <- t_statistic_Q(f_data, lag)
if (bootstrap == TRUE) {
bootsraps <- list()
stats_distr <- list()
s_time_boot <- Sys.time()
bootstrap_samples <- block_bootsrap(f_data, block_size, straps)
e_time_boot <- Sys.time()
boot_time <- e_time_boot - s_time_boot
s_stat_time <- Sys.time()
for (i in 1:straps) {
stats_distr[[i]] <- t_statistic_Q(bootstrap_samples[[i]], lag = lag)
}
e_stat_time <- Sys.time()
stat_time <- e_stat_time - s_stat_time
statistic <- t_statistic_Q(f_data, lag=lag)
quantile <- quantile(as.numeric(stats_distr), 1 - alpha)
list(reject = statistic > quantile, statistic = statistic, quantile = quantile)
sprintf("Time taken for bootstrapping is %f and time take for stat distr. is %f", boot_time, stat_time)
} else if (iid == FALSE) {
results <- Q_WS_quantile(f_data, lag, alpha=alpha, M=M, low_disc=low_disc,
numcores=numcores)
statistic <- results$statistic
quantile <- results$quantile
p_val <- results$p_val
reject <- statistic > quantile
list(p_value = p_val, quantile = quantile, reject = reject)
} else {
results <- Q_WS_quantile_iid(f_data, alpha=alpha)
statistic <- results$statistic
quantile <- results$quantile
p_val <- results$p_val
reject <- statistic > quantile
list(p_value = p_val, quantile = quantile, reject = reject)
}
Q_WS_hyp_test(brown_motion(250, 150), lag=1,  bootstrap = TRUE)
1
re2fwead
}
Q_WS_hyp_test <- function(f_data, lag, alpha=0.05, iid=FALSE,
M=NULL, low_disc=FALSE, numcores=NULL, bootstrap=FALSE,
straps=300, block_size=10) {
statistic <- t_statistic_Q(f_data, lag)
if (bootstrap == TRUE) {
bootsraps <- list()
stats_distr <- list()
s_time_boot <- Sys.time()
bootstrap_samples <- block_bootsrap(f_data, block_size, straps)
e_time_boot <- Sys.time()
boot_time <- e_time_boot - s_time_boot
s_stat_time <- Sys.time()
for (i in 1:straps) {
stats_distr[[i]] <- t_statistic_Q(bootstrap_samples[[i]], lag = lag)
}
e_stat_time <- Sys.time()
stat_time <- e_stat_time - s_stat_time
statistic <- t_statistic_Q(f_data, lag=lag)
quantile <- quantile(as.numeric(stats_distr), 1 - alpha)
list(reject = statistic > quantile, statistic = statistic, quantile = quantile)
sprintf("Time taken for bootstrapping is %f and time take for stat distr. is %f", boot_time, stat_time)
} else if (iid == FALSE) {
results <- Q_WS_quantile(f_data, lag, alpha=alpha, M=M, low_disc=low_disc,
numcores=numcores)
statistic <- results$statistic
quantile <- results$quantile
p_val <- results$p_val
reject <- statistic > quantile
list(p_value = p_val, quantile = quantile, reject = reject)
} else {
results <- Q_WS_quantile_iid(f_data, alpha=alpha)
statistic <- results$statistic
quantile <- results$quantile
p_val <- results$p_val
reject <- statistic > quantile
list(p_value = p_val, quantile = quantile, reject = reject)
}
}
Q_WS_hyp_test(brown_motion(250, 150), lag=1,  bootstrap = TRUE)
lapply(t, t_statistic_Q)
lapply(t, t_statistic_Q(, lag=1))
lapply(t, t_statistic_Q, lag=1)
Q_WS_hyp_test <- function(f_data, lag, alpha=0.05, iid=FALSE,
M=NULL, low_disc=FALSE, numcores=NULL, bootstrap=FALSE,
straps=300, block_size=10) {
statistic <- t_statistic_Q(f_data, lag)
if (bootstrap == TRUE) {
bootsraps <- list()
#stats_distr <- list()
s_time_boot <- Sys.time()
bootstrap_samples <- block_bootsrap(f_data, block_size, straps)
e_time_boot <- Sys.time()
boot_time <- e_time_boot - s_time_boot
s_stat_time <- Sys.time()
#for (i in 1:straps) {
#stats_distr[[i]] <- t_statistic_Q(bootstrap_samples[[i]], lag = lag)
#}
stats_distr <- lapply(bootstrap_samples, t_statistic_Q, lag=lag)
e_stat_time <- Sys.time()
stat_time <- e_stat_time - s_stat_time
statistic <- t_statistic_Q(f_data, lag=lag)
quantile <- quantile(as.numeric(stats_distr), 1 - alpha)
list(reject = statistic > quantile, statistic = statistic, quantile = quantile)
sprintf("Time taken for bootstrapping is %f and time take for stat distr. is %f", boot_time, stat_time)
} else if (iid == FALSE) {
results <- Q_WS_quantile(f_data, lag, alpha=alpha, M=M, low_disc=low_disc,
numcores=numcores)
statistic <- results$statistic
quantile <- results$quantile
p_val <- results$p_val
reject <- statistic > quantile
list(p_value = p_val, quantile = quantile, reject = reject)
} else {
results <- Q_WS_quantile_iid(f_data, alpha=alpha)
statistic <- results$statistic
quantile <- results$quantile
p_val <- results$p_val
reject <- statistic > quantile
list(p_value = p_val, quantile = quantile, reject = reject)
}
}
Q_WS_hyp_test(brown_motion(250, 150), lag=1,  bootstrap = TRUE)
Q_WS_hyp_test(brown_motion(250, 150), lag=1,  bootstrap = TRUE)
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::load_all()
devtools::check()
devtools::document()
devtools::check()
devtools::run_examples()
devtools::load_all()
devtools::run_examples()
devtools::load_all()
devtools::run_examples()
devtools::check()
devtools::load_all()
devtools::run_examples()
devtools::load_all()
devtools::run_examples()
devtools::load_all()
devtools::run_examples()
devtools::load_all()
devtools::run_examples()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check_built()
devtools::dr_devtools()
devtools::test()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
fgarch_1_1(100, 50)
devtools::load_all()
devtools::check()
devtools::build()
devtools::check()
usethis::use_vignette()
usethis::use_vignette('wwntests_vignette')
devtools::build_vignettes()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
cwd
swd
wd
getwd
getwd()
disable()
packrat::disable()
packrat::init()
getwd
getwd()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::load_all()
b <- brown_motion(250, 150)
block_bootsrap(b, 0, 0)
block_bootsrap(b, 2, 0)
spectral_t_statistic(b)
spectral_hyp_test(b)
adaptive_bandwidth(b, 'Barlett')
res <- list()
for (i in 1:500) {
b <- brown_motion(100, 100)
res[[i]] <- adaptive_bandwidth(b, 'Barlett')
}
res
res < 0
res <- list()
for (i in 1:500) {
b <- brown_motion(100, 100)
res[[i]] <- adaptive_bandwidth(b, 'Parzen')
}
res < 0
res <- list()
for (i in 1:1000) {
b <- brown_motion(100, 100)
res[[i]] <- adaptive_bandwidth(b, 'Daniell')
}
res < 0
res
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
b <- brown_motion(250, 250)
spectral_hyp_test(b)
spectral_hyp_test(b, kernel = 'Parzen', bandwidth = 'adaptive')
adaptive_bandwidth(b, "Barlett")
adaptive_bandwidth(b, "Parzen")
adaptive_bandwidth(b, "Daniell")
spectral_t_statistic(b, kernel='Parzen', bandwidth = 2)
spectral_hyp_test(b, kernel = 'Parzen', bandwidth = 'adaptive')
spectral_hyp_test(b, kernel = 'Parzen', bandwidth = 2)
spectral_hyp_test(b, kernel = 'Parzen', bandwidth = 'static')
spectral_hyp_test(b, kernel = 'Parzen', bandwidth = 'adaptive')
devtools::load_all()
spectral_hyp_test(b, kernel = 'Parzen', bandwidth = 'adaptive')
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'multi-lag', lag = 10)
autocorrelation_coeff_plot(b)
t_statistic_Q(b,1)
t_statistic_Q(b,1)
t_statistic_Q(b,2)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'single-lag', lag = 1)
set.seed(42)
devtools::load_all()
b <- brown_motion(T = 200, J = 100)
f <- far_1_S(T = 200, J = 100, S = 0.75)
fport_test(f_data = b, test = 'single-lag', lag = 1)
set.seed(4242)
devtools::load_all()
b <- brown_motion(T = 200, J = 100)
f <- far_1_S(T = 200, J = 100, S = 0.75)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = f, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'multi-lag', lag = 10)
fport_test(f_data = f, test = 'multi-lag', lag = 10)
autocorrelation_coeff_plot(f_data = b, K = 20)
autocorrelation_coeff_plot(f_data = f, K = 20)
set.seed(12345)
devtools::load_all()
b <- brown_motion(T = 200, J = 100)
f <- far_1_S(T = 200, J = 100, S = 0.75)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'single-lag', lag = 1)
set.seed(1234)
devtools::load_all()
b <- brown_motion(T = 200, J = 100)
f <- far_1_S(T = 200, J = 100, S = 0.75)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = f, test = 'single-lag', lag = 1)
fport_test(f_data = b, test = 'multi-lag', lag = 10)
fport_test(f_data = b, test = 'single-lag', lag = 1)
fport_test(f_data = f, test = 'multi-lag', lag = 10)
autocorrelation_coeff_plot(f_data = b, K = 20)
autocorrelation_coeff_plot(f_data = f, K = 20)
fport_test(f, test='spectral', bandwidth = 'adaptive', alpha = 0.01)
fport_test(f, test='spectral', kernel = 'Parzen', bandwidth = 'static')
fport_test(b, test='spectral', kernel = 'Daniell', bandwidth = 3)
fport_test(b, test='spectral')
fport_test(f, test='spectral', kernel = 'Parzen', bandwidth = 1)
fport_test(f, test='spectral', kernel = 'Parzen', bandwidth = 2)
fport_test(f, test='spectral', kernel = 'Parzen', bandwidth = 0)
fport_test(f, test='spectral', kernel = 'Parzen', bandwidth = 1)
fport_test(f, test='spectral', kernel = 'Parzen', bandwidth = 2)
fport_test(f, test='spectral', kernel = 'Parzen', bandwidth = 10)
fport_test(f, test='spectral', kernel = 'Parzen', bandwidth = 20)
fport_test(f, test='spectral', bandwidth = 'adaptive', alpha = 0.01)
f_1 <- far_1_S(250, 150, 0.1)
fport_test(f_1, test='spectral')
fport_test(f_1, test='spectral')
fport_test(b, test='spectral', bandwidth = 'static')
list(1,3,4)
dim(list(1,2,3))
length(list(1,2,3))
expect_is(t <- fport_test(b1, test = 'single-lag', lag = 12), "list")
expect_is(t <- fport_test(b, test = 'single-lag', lag = 12), "list")
t
expect_is(fport_test(b, test = 'single-lag', lag = 12), "list")
expect_is(fport_test(b, test = 'single-lag', lag = 12), "numeric")
is.na(list(1,2,3))
is.na(list(1,2,NA))
sum(is.na(list(1,2,NA)))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
help(brown_motion)
usethis::use_git()
